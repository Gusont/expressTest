#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('expresstest:server');
var http = require('http');
const schedule = require('node-schedule');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '8080');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}


function scheduleJobStart() {
  let schedule = require('node-schedule');
  // 定义规则
  let rule = new schedule.RecurrenceRule();
  // rule.date = [1]; // 每月1号 
  // rule.dayOfWeek = [1,3,5]; // 每周一、周三、周五 
  // rule.hour = 0; rule.minute = 0; rule.second = 0; // 每天0点执行
  // rule.second = [0,10,20,30,40,50]; // 隔十秒
  rule.minute = [0,20,40]; // 每小时的0分钟，20分钟，40分钟执行
  // 启动任务
  // let job = schedule.scheduleJob(rule, ()=>{
  //   httpGet();
  //   console.log('现在时间：',new Date());
  // });
  // 取消任务
  // job.cancel(); 
  const job = schedule.scheduleJob('*/3 * * * *', function(){
    // do some
    try {
      httpGet();
    } catch (error) {
      console.error(error);
    }
    console.log('现在时间：',new Date());
  });
  // job.cancel();
  function httpGet() {
      let https = require('https');
      let url = "https://baidu.com"
      https.get(url, function (res) {
          console.log("请求成功: " + res);
      })
  }
}
scheduleJobStart();
